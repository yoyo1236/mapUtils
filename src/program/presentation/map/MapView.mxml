<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:esri="http://www.esri.com/2008/ags"
		 xmlns:sf="http://www.spicefactory.org/parsley"
		 
		 creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<esri:SimpleMarkerSymbol id="pharosBaseSymbol" alpha="0.5" color="0xFF0000" size="12"
								 style="triangle">
			<esri:SimpleLineSymbol width="2"/>
		</esri:SimpleMarkerSymbol>
		
		<esri:SimpleMarkerSymbol id="wldBaseSymbol" alpha="0.5" color="0x0000FF" size="12"
								 style="triangle">
			<esri:SimpleLineSymbol width="2"/>
		</esri:SimpleMarkerSymbol>
		
		<esri:SimpleMarkerSymbol id="pharosUpdateSymbol" alpha="0.5" color="0xFFFF00" size="12"
								 style="circle">
			<esri:SimpleLineSymbol width="2"/>
		</esri:SimpleMarkerSymbol>
		
		<esri:SimpleMarkerSymbol id="wldUpdateSymbol" alpha="0.5" color="0x00FFFF" size="12"
								 style="circle">
			<esri:SimpleLineSymbol width="2"/>
		</esri:SimpleMarkerSymbol>
		
		<esri:SimpleMarkerSymbol id="nodeSymbol" alpha="0.5" color="0x00FFFF" size="5"
								 style="circle">
			<esri:SimpleLineSymbol width="2"/>
		</esri:SimpleMarkerSymbol>
		
		<sf:Configure/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.WebMercatorMapPoint;
			import com.esri.ags.layers.supportClasses.LOD;
			import com.esri.ags.utils.WebMercatorUtil;
			import com.esri.ags.webmap.WebMapUtil;
			import com.examyes.flex.tools.ExtJS;
			import com.examyes.flex.tools.Utils;
			
			import mx.controls.Alert;
			import mx.logging.*;
			
			import program.application.message.DialogMessage;
			
			private var LOG:ILogger = Utils.getLogger(this);
			
			[Inject]
			[Bindable]
			public var model:MapViewPM;
			
			private function init():void
			{
				initMap();
				loadHandler();
				model.initComplete(this);
			}
			
			
			
			private function initMap():void
			{
				// 中国地图
				baseMapLayer.url = ExtJS.call("getMapUrl");
				LOG.debug("ExtJS get Map Url: {0}", baseMapLayer.url);
				//map.level = 18;
				// 12405781 3303506 13171374 3737057
				//map.extent = new Extent(12405781, 3303506, 13171374, 3737057, map.spatialReference);
				//map.spatialReference.wkt = "GEOGCS[\"MapInfo Generic Lat/Long\",DATUM[\"D_MAPINFO\",SPHEROID[\"World_Geodetic_System_of_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]]";
				
				//map.extent = new Extent(-238.443935788332, -348.31, 5007.32265155496, 7314.51, map.spatialReference);
			}
			
			private function loadHandler():void
			{
				map.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			}
			
			private function mouseMoveHandler(event:MouseEvent):void
			{
				const mapPoint:MapPoint = map.toMapFromStage(event.stageX, event.stageY);
				const latlong:MapPoint = WebMercatorUtil.webMercatorToGeographic(mapPoint) as MapPoint;
				mousecoords.text =
					"x,y is " + mapPoint.x.toFixed(0) + "," + mapPoint.y.toFixed(0)
					+ " and Lat/Long is: " + latlong.y.toFixed(6)
					+ " / " + latlong.x.toFixed(6);
				
			}
			/*
			protected function showExtentInGeographic(extent:Extent):String
			{
				const geoExtent:Extent = WebMercatorUtil.webMercatorToGeographic(map.extent) as Extent;
				// return geoExtent.toString() + ".." ;
				return " " + geoExtent.xmin.toFixed(6)
					+ ", " + geoExtent.ymin.toFixed(6)
					+ ", " + geoExtent.xmax.toFixed(6)
					+ ", " + geoExtent.ymax.toFixed(6)
					+ "   (wkid: " + geoExtent.spatialReference.wkid + ")";
			}
			
			[MessageHandler(selector="configDataLoaded")]
			public function configDataReady(msg:DeviceDataMessage):void
			{
				LOG.debug("configDataReady");
				var g:DeviceGraphic;
				var latlong:MapPoint;
				for (var pIndex:int = 0; pIndex < model.pharosList.length; ++pIndex)
				{
					var pharos:Pharos = model.pharosList.getItemAt(pIndex) as Pharos;
					
					g = new DeviceGraphic();
					g.deviceType = DeviceType.PHAROS;
					g.deviceId = pharos.terminalId;
					
					latlong = new WebMercatorMapPoint(pharos.baseLongitude, pharos.baseLatitude);
					g.geometry = latlong;
					g.symbol = pharosBaseSymbol;
					g.toolTip = "航标灯基点：" + pharos.pharosName;
					g.locationType = LocationType.BASE_LOCATION;
					
					g.addEventListener(MouseEvent.CLICK, deviceGraphicClickHandler);
					
					markerLayer.add(g);
				}
				
				for (var wIndex:int = 0; wIndex < model.waterLevelDetectorList.length; ++wIndex)
				{
					var wld:WaterLevelDetector = model.waterLevelDetectorList.getItemAt(wIndex) as WaterLevelDetector;
					g = new DeviceGraphic();
					g.deviceType = DeviceType.WATER_LEVEL_DETECTOR;
					g.deviceId = wld.id;
					
					latlong = new WebMercatorMapPoint(wld.baseLocationLongitude, wld.baseLocationLatitude);
					g.geometry = latlong;
					g.symbol = wldBaseSymbol;
					g.toolTip = "水位探测器基点：" + wld.name;
					
					g.addEventListener(MouseEvent.CLICK, deviceGraphicClickHandler);
					markerLayer.add(g);
					
				}
				var centerLatlong:MapPoint = new WebMercatorMapPoint(118.819690, 32.038030);
				
				map.centerAt(centerLatlong);
			}
			
			private function deviceGraphicClickHandler(event:MouseEvent):void
			{
				var g:DeviceGraphic = event.target as DeviceGraphic;
				model.deviceSelected(g.deviceType, g.deviceId);
				
				var info:String;
				
				if (DeviceType.PHAROS == g.deviceType)
				{
					var p:Pharos = model.getPharosById(g.deviceId);
					if (g.locationType == LocationType.BASE_LOCATION)
					{
						info = "航标灯基点\n";
					}
					else
					{
						info = "航标灯\n";
					}
					info += "编号：" + p.terminalId
						+ "\n名称：" + p.pharosName
						+ "\n经度：" + p._longitude.toFixed(6)
						+ "\n纬度：" + p._latitude.toFixed(6)
						+ "\n基点经度：" + p._baseLongitude.toFixed(6)
						+ "\n基点纬度：" + p._baseLatitude.toFixed(6);
					
				}
				else if (DeviceType.WATER_LEVEL_DETECTOR == g.deviceType)
				{
					var wld:WaterLevelDetector = model.getWaterLevelDetectorById(g.deviceId);
					info = "水位探测器\n";
					info += "编号：" + wld.id
						+ "\n名称：" + wld.name
						+ "\n基点经度：" + wld.baseLocationLongitude.toFixed(6)
						+ "\n基点纬度：" + wld.baseLocationLatitude.toFixed(6);
					
				}
				
				
				map.infoWindow.label = info;
				map.infoWindow.setStyle("fontFamily", "微软雅黑");
				map.infoWindow.show(g.geometry as MapPoint);
			}
			
			[MessageHandler]
			public function mapLocatingHandler(msg:MapLocatingMessage):void
			{
				var latlong:MapPoint;
				var info:String;
				if (msg.deviceType == DeviceType.PHAROS)
				{
					var p:Pharos = model.getPharosById(msg.deviceId);
					if (msg.locationType == LocationType.BASE_LOCATION || model.pharosGraphicHashMap[p.terminalId] == null)
					{
						latlong = new WebMercatorMapPoint(p.baseLongitude, p.baseLatitude);
						LOG.debug("mapLocatingHandler, DeviceType: Pharos, BASE_LOCATION, Longitude: {0}, Latitude: {1}", p.baseLongitude, p.baseLatitude);
						map.centerAt(latlong);
						
						info = "航标灯基点\n"
							+ "编号：" + p.terminalId
							+ "\n名称：" + p.pharosName
							+ "\n经度：" + p._longitude.toFixed(6)
							+ "\n纬度：" + p._latitude.toFixed(6)
							+ "\n基点经度：" + p._baseLongitude.toFixed(6)
							+ "\n基点纬度：" + p._baseLatitude.toFixed(6);
					}
					else 
					{
						latlong = new WebMercatorMapPoint(p.longitude, p.latitude);
						LOG.debug("mapLocatingHandler, DeviceType: Pharos, REALTIME_LOCATION, Longitude: {0}, Latitude: {1}", p.baseLongitude, p.baseLatitude);
						map.centerAt(latlong);
						
						info = "航标灯\n"
							+ "编号：" + p.terminalId
							+ "\n名称：" + p.pharosName
							+ "\n经度：" + p._longitude.toFixed(6)
							+ "\n纬度：" + p._latitude.toFixed(6)
							+ "\n基点经度：" + p._baseLongitude.toFixed(6)
							+ "\n基点纬度：" + p._baseLatitude.toFixed(6);
					}
					map.infoWindow.label = info;
					map.infoWindow.setStyle("fontFamily", "微软雅黑");
					map.infoWindow.show(latlong);
					
				}
				else if (msg.deviceType == DeviceType.WATER_LEVEL_DETECTOR)
				{
					var wld:WaterLevelDetector = model.getWaterLevelDetectorById(msg.deviceId);
					latlong = new WebMercatorMapPoint(wld.baseLocationLongitude, wld.baseLocationLatitude);
					LOG.debug("mapLocatingHandler, DeviceType: WLD, Longitude: {0}, Latitude: {1}", wld.baseLocationLongitude, wld.baseLocationLatitude);
					map.centerAt(latlong);
					
					info = "水位探测器\n"
						+ "编号：" + wld.id
						+ "\n名称：" + wld.name
						+ "\n基点经度：" + wld.baseLocationLongitude.toFixed(6)
						+ "\n基点纬度：" + wld.baseLocationLatitude.toFixed(6);
					
					map.infoWindow.label = info;
					map.infoWindow.setStyle("fontFamily", "微软雅黑");
					
					map.infoWindow.show(latlong);
				}
			}
			
			[MessageHandler(selector="updateDataComplete")]
			public function updateDataCompleteHandler(msg:DeviceDataMessage):void
			{
				LOG.debug("updateDataCompleteHandler");
				var pharosUpdateList:Array = model.getPharosUpdateList();
				var g:DeviceGraphic;
				var latlong:MapPoint;
				var i:int = 0;
				for ( i = 0; i < pharosUpdateList.length; ++i)
				{
					var id:String = pharosUpdateList[i];
					var p:Pharos = model.getPharosById(id);
					var paths:Array;
					if (model.pharosGraphicHashMap[id] == null)
					{
						LOG.debug("updateDataCompleteHandler new DeviceGraphic");
						
						g = new DeviceGraphic();
						g.deviceType = DeviceType.PHAROS;
						g.deviceId = p.terminalId;
						
						latlong = new WebMercatorMapPoint(p.longitude, p.latitude);
						g.geometry = latlong;
						g.symbol = pharosUpdateSymbol;
						g.toolTip = "航标灯基点：" + p.pharosName;
						g.locationType = LocationType.REALTIME_LOCATION;
						
						g.addEventListener(MouseEvent.CLICK, deviceGraphicClickHandler);
						
						markerLayer.add(g);
						model.pharosGraphicHashMap[id] = g;
						
						paths =  
							[[
								new WebMercatorMapPoint(p.baseLongitude, p.baseLatitude),
								new WebMercatorMapPoint(p.longitude, p.latitude)
							]];
						g.updateLineGeometry(paths);
						
						markerLayer.add(g.gLine);
					}
					else
					{
						LOG.debug("updateDataCompleteHandler update DeviceGraphic geometry");
						g = model.pharosGraphicHashMap[id] as DeviceGraphic;
						latlong = new WebMercatorMapPoint(p.longitude, p.latitude);
						g.geometry = latlong;
						
						paths =  
							[[
								new WebMercatorMapPoint(p.baseLongitude, p.baseLatitude),
								new WebMercatorMapPoint(p.longitude, p.latitude)
							]];
						g.updateLineGeometry(paths);
						
					}
				}
			}
			
			[MessageHandler]
			public function selectedDeviceChangedHandler(msg:SelectedDeviceChange):void
			{
				LOG.debug("selectedDeviceChangedHandler");
				var latlong:MapPoint;
				if (msg.type == DeviceType.PHAROS)
				{
					var p:Pharos = model.getPharosById(msg.id);
					if (isNaN(p.longitude) || isNaN(p.latitude))
					{
						latlong = null;
					}
					else 
					{
						latlong = new WebMercatorMapPoint(p.longitude, p.latitude);
					}
				}
				else if (msg.type == DeviceType.WATER_LEVEL_DETECTOR)
				{
					var wld:WaterLevelDetector = model.getWaterLevelDetectorById(msg.id);
					latlong = new WebMercatorMapPoint(wld.baseLocationLongitude, wld.baseLocationLatitude);
				}
				
				if (latlong != null)
					map.centerAt(latlong);
			}*/
		]]>
	</fx:Script>
	
	<!-- <esri:Map id="map" width="100%" height="100%" load="loadHandler();" logoVisible="false">-->
	<esri:Map id="map" width="100%" height="100%" logoVisible="false">
		<esri:ArcGISDynamicMapServiceLayer id="baseMapLayer"/>
		<!-- <esri:ArcGISTiledMapServiceLayer id="baseMapLayer"/>
		-->
		<esri:GraphicsLayer id="markerLayer"/>
	</esri:Map>
	
	<s:Group x="50" y="0" visible="true"> 
		<s:layout>
			<s:VerticalLayout paddingTop="6"/>
		</s:layout>
		
		<s:HGroup>
			<s:Label fontWeight="bold" text="Current map extent:"/>
			<s:RichEditableText editable="false"
								text="xmin=&quot;{map.extent.xmin.toFixed(0)}&quot; ymin=&quot;{map.extent.ymin.toFixed(0)}&quot; xmax=&quot;{map.extent.xmax.toFixed(0)}&quot; ymax=&quot;{map.extent.ymax.toFixed(0)}&quot;   (wkid=&quot;{map.spatialReference.wkid}&quot;)"/>
		</s:HGroup>
		<s:HGroup>
			<s:Label fontWeight="bold" text="Current map extent (in geographic):"/>
			<!--<s:RichEditableText editable="false" text="{showExtentInGeographic(map.extent)}"/>-->
		</s:HGroup>
		<s:HGroup>
			<s:Label fontWeight="bold" text="Current Mouse Coordinates:"/>
			<s:RichEditableText id="mousecoords" editable="false"
								text="Move the mouse over the map to see its current coordinates..."/>
		</s:HGroup>
		<s:HGroup>
			<s:Label fontWeight="bold" text="Current map scale is"/>
			<s:RichEditableText editable="false" text="1:{map.scale.toFixed(0)} (level {map.level})"/>
		</s:HGroup>
		
	</s:Group>
</s:Group>
